// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['views/template_view', 'views/questions_results_view', 'utils', 'jquery.fittext'], function(TemplateView, ResultsView, utils) {
    var QuestionView;
    return QuestionView = (function(_super) {
      __extends(QuestionView, _super);

      function QuestionView() {
        this.updateState = __bind(this.updateState, this);
        this.updateAnswers = __bind(this.updateAnswers, this);
        return QuestionView.__super__.constructor.apply(this, arguments);
      }

      QuestionView.prototype.template_id = "questions-show";

      QuestionView.prototype.className = "page questions-show";

      QuestionView.prototype.events = {
        "click button.start": "startQuestion",
        "click button.stop": "stopQuestion",
        "click a.qr": "showQRCode",
        "submit form.questions-destroy": "confirmDestroy",
        "click .fullscreen": "showFS"
      };

      QuestionView.prototype.initialize = function() {
        this.resultsView = new ResultsView({
          model: this.model.toJSON().answers
        });
        this.listenTo(this.model, "change:answers", this.updateAnswers);
        this.listenTo(this.model, "change:state", this.updateState);
        return this.interval = setInterval(((function(_this) {
          return function() {
            return _this.model.fetch();
          };
        })(this)), 2000);
      };

      QuestionView.prototype.remove = function() {
        clearInterval(this.interval);
        this.resultsView.remove();
        return QuestionView.__super__.remove.call(this);
      };

      QuestionView.prototype.render = function() {
        var context;
        context = _.extend(this.model.toJSON(), {
          qr_code: cliqr.config.PLUGIN_URL + "qr/" + cliqr.config.CID,
          short_url: cliqr.config.SHORT_URL
        });
        this.$el.html(this.template(context));
        this.$(".results").replaceWith(this.resultsView.render().el);
        return this;
      };

      QuestionView.prototype.postRender = function() {
        this.resultsView.postRender();
        return this.$(".vote .url").fitText();
      };

      QuestionView.prototype.updateAnswers = function(model, answers, options) {
        return this.resultsView.update(answers);
      };

      QuestionView.prototype.updateState = function(model, state, options) {
        this.render();
        return this.postRender();
      };

      QuestionView.prototype.showQRCode = function(event) {
        var content, dialog, origin;
        event.preventDefault();
        origin = $(event.target);
        dialog = origin.closest('.vote').find('.dialog');
        content = dialog.html();
        $(document).one('dialog-open', function(event, parameters) {
          return $(parameters.dialog).fitText();
        });
        STUDIP.Dialog.show(content, {
          id: "dialog-qr",
          width: 550,
          height: 700,
          title: dialog.attr('title'),
          resize: false
        });
        return this.$(".question").toggleClass("qr-visible");
      };

      QuestionView.prototype.confirmDestroy = function(event) {
        if (!window.confirm(jQuery(event.target).data("confirm"))) {
          return event.preventDefault();
        }
      };

      QuestionView.prototype.showFS = function(event) {
        var container, method, methods, _i, _len, _results;
        event.preventDefault();
        container = this.el;
        methods = ["requestFullscreen", "mozRequestFullScreen", "webkitRequestFullscreen"];
        _results = [];
        for (_i = 0, _len = methods.length; _i < _len; _i++) {
          method = methods[_i];
          if (!container[method]) {
            continue;
          }
          container[method]();
          break;
        }
        return _results;
      };

      QuestionView.prototype.startQuestion = function(event) {
        event.preventDefault();
        this.$(".appeal.start").addClass("busy");
        return this.model.start().done((function(_this) {
          return function() {
            return _this.model.fetch();
          };
        })(this));
      };

      QuestionView.prototype.stopQuestion = function(event) {
        event.preventDefault();
        return this.model.stop().done((function(_this) {
          return function() {
            return _this.model.fetch();
          };
        })(this));
      };

      return QuestionView;

    })(TemplateView);
  });

}).call(this);
